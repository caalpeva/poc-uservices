#!/bin/echo "source me !"
# Requires:
# /../../dependencies/downloads/poc-bash-master/includes/print-utils.src
# /../../dependencies/downloads/poc-bash-master/includes/trace-utils.src
# /../../dependencies/downloads/poc-bash-master/includes/progress-bar-utils.src
# /../../utils/uservices.src

##########################
#  K8S GLOBAL VARIABLES  #
##########################
K8S_NAMESPACE=""
K8S_LABELS=""

RESTART_TIMEOUT_SECS=300
RESTART_INTERVAL_SECS=25   # Set interval (duration) in seconds

METRICS_TIMEOUT_SECS=150  # Set timeout in seconds
METRICS_INTERVAL_SECS=10   # Set interval (duration) in seconds

##########################
#    BASIC K8S METHODS   #
##########################

function kubectl::showKubeconfig() {
  print_info "Check the active KUBECONFIG"
  xtrace on
  echo "KUBECONFIG=$KUBECONFIG"
  kubectl config view
  xtrace off
  checkInteractiveMode
}

function kubectl::showKubeconfigFile() {
  xtrace on
  kubectl --kubeconfig=$1 config view
  xtrace off
  checkInteractiveMode
}

function kubectl::setKubeconfig() {
  print_debug "Set KUBECONFIG to new kubeconfig file"
  kubeconfigFile=$1
  xtrace on
  export KUBECONFIG=$kubeconfigFile
  xtrace off
  checkInteractiveMode
}

function kubectl::unsetKubeconfig() {
  print_debug "Unset KUBECONFIG"
  xtrace on
  unset KUBECONFIG
  xtrace off
}

function kubectl::showNodes() {
  print_info "Show information about nodes"
  xtrace on
  kubectl get nodes
  xtrace off
  checkInteractiveMode
}

function kubectl::getNodeAddresses() {
  xtrace on
  kubectl get nodes --no-headers \
    -o custom-columns=":status.addresses[?(@.type == 'InternalIP')].address"
  xtrace off
}

function kubectl::getMasterNodeAddresses() {
  xtrace on
  kubectl get nodes --no-headers \
    --selector=node-role.kubernetes.io/master \
    -o custom-columns=":status.addresses[?(@.type == 'InternalIP')].address"
  xtrace off
}

function kubectl::apply() {
  print_info "Apply configuration"
  for file in $@
  do
    xtrace on
    kubectl apply -f $file
    xtrace off
  done
  sleep 1
}

function kubectl::applyReplacingPaths() {
  print_info "Apply configuration"
  DIR=$1
  shift
  for file in $@
  do
    xtrace on
    cat $file | sed s+{{path}}+${DIR}+g | kubectl apply -f -
    xtrace off
  done
  sleep 1
}

function kubectl::applyReplacingEnvVars() {
  print_info "Apply configuration"
  xtrace on
    envsubst < $1 | kubectl apply -f -
  xtrace off
  sleep 1
}

function kubectl::applyWithRecord() {
  print_info "Apply configuration"
  for file in $@
  do
    xtrace on
    kubectl apply -f $file --record
    xtrace off
  done
  sleep 1
}

function kubectl::unapply() {
  print_info "Unapply configuration"
  for file in $@
  do
    xtrace on
    kubectl delete -f $file --wait=true --ignore-not-found=true
    xtrace off
  done
  sleep 3
}

function kubectl::unapplyReplacingPaths() {
  print_info "Unapply configuration"
  DIR=$1
  shift
  for file in $@
  do
    xtrace on
    cat $file | sed s+{{path}}+${DIR}+g | kubectl delete -f - --wait=true --ignore-not-found=true
    xtrace off
  done
  sleep 1
}

function kubectl::unapplyReplacingEnvVars() {
  print_info "Unapply configuration"
  xtrace on
  envsubst < $1 | kubectl delete -f - --wait=true --ignore-not-found=true
  xtrace off
  sleep 1
}

function kubectl::showAll() {
  print_info "Show all objects by default namespace"
  xtrace on
  kubectl get all -l $1 -o wide
  xtrace off
  checkInteractiveMode
}

function kubectl::resetGlobalVariables() {
  K8S_NAMESPACE=""
  K8S_LABELS=""
}

function kubectl::manageArguments() {
  kubectl::resetGlobalVariables
  OPTIND=1
  while getopts "n:l:" option; do
    case ${option} in
      n) K8S_NAMESPACE=$OPTARG
         ;;
      l) K8S_LABELS=$OPTARG
         ;;
      ?) echo "Invalid option: $OPTARG" 1>&2
         ;;
      :) echo "Invalid option: $OPTARG requires an argument" 1>&2
    esac
  done
  shift $((OPTIND-1))
}

##########################
#    NAMESPACE METHODS   #
##########################

function kubectl::describeNamespace() {
  print_info "Describe namespace"
  xtrace on
  kubectl describe ns $1
  xtrace off
  checkInteractiveMode
}

function kubectl::deleteNamespace() {
  print_info "Delete namespace"
  xtrace on
  kubectl delete ns $1
  xtrace off
}

##########################
#       POD METHODS      #
##########################

function kubectl::showPods() {
  print_info "Show pods"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pods ${K8S_LABELS:+-l $K8S_LABELS} \
    --output wide
  xtrace off
  checkInteractiveMode
}

function kubectl::showPodsInAllNamespaces() {
  print_info "Show pods"
  kubectl::manageArguments $@
  xtrace on
  kubectl get pods --all-namespaces ${K8S_LABELS:+-l $K8S_LABELS} --output wide
  xtrace off
  checkInteractiveMode
}

function kubectl::getRunningPods() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get po ${K8S_LABELS:+-l $K8S_LABELS} \
    --no-headers | grep Running | awk '{print $1}'
  #kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get po --no-headers --field-selector=status.phase=Running | awk '{print $1}'
  xtrace off
}

function kubectl::getAllPods() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get po ${K8S_LABELS:+-l $K8S_LABELS} \
    --no-headers | awk '{print $1}'
  xtrace off
}

function kubectl::getPodNames() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get pods ${K8S_LABELS:+-l $K8S_LABELS} \
    --no-headers -o custom-columns=":metadata.name"
  xtrace off
}

function kubectl::getPodStatus() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pods ${K8S_LABELS:+-l $K8S_LABELS} \
    --no-headers -o custom-columns=":status.phase"
  xtrace off
}

function kubectl::getRamLimitFromDeployment() {
  deployment=$1
  shift
  #kubectl get pods -o json
  #kubectl get pods -o=jsonpath='{@}'
  #kubectl get pods -o=jsonpath='{.items[0]}'
  #kubectl get pods -o=jsonpath='{.items[0].metadata.name}'
  #kubectl get pods -o=jsonpath="{.items[*]['metadata.name', 'status.capacity']}"
  #kubectl get pods -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.startTime}{"\n"}{end}'
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get deploy $deployment -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{..resources.limits.memory}{"\n"}'
  xtrace off
}

function kubectl::getCpuLimitFromDeployment() {
  deployment=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get deploy $deployment -o=jsonpath='{range .items[*]}{.metadata.name}{"\t"}{..resources.limits.cpu}{"\n"}'
  xtrace off
}

function kubectl::getResourceLimitFromPod() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pod $pod -o yaml | grep limits: -A 5
  xtrace off
}

function kubectl::getRestartCountByPod() {
  pod=$1
  shift
  kubectl::manageArguments $@
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pod $pod --no-headers \
    -o custom-columns=":status.containerStatuses[0].restartCount"
  xtrace off
}

function kubectl::getFirstPodName() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pods ${K8S_LABELS:+-l $K8S_LABELS} \
    -o jsonpath="{.items[0].metadata.name}"
  xtrace off
}

function kubectl::waitForPodsByLabel() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    wait pods ${K8S_LABELS:+-l $K8S_LABELS} \
    --for=condition=Ready
    #--timeout=30s
  xtrace off
  checkInteractiveMode
}

function kubectl::waitForReadyPod() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} wait \
    --for=condition=ready pod $pod --timeout=45s
  xtrace off
}


function kubectl::deletePod() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} delete pod $pod
  xtrace off
  checkInteractiveMode
}

function kubectl::forceDeletePod() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} delete pod $pod --force --grace-period=0
  xtrace off
}

function kubectl::showLogs() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} wait --for=condition=ready pod $pod
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} logs $pod
  xtrace off
  checkInteractiveMode
}

function kubectl::showLogsNoTimeout() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} wait --for=condition=ready pod $pod --timeout=1s
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} logs $pod
  xtrace off
  checkInteractiveMode
}

function kubectl::showLogsByContainer() {
  pod=$1
  container=$2
  shift
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} wait --for=condition=ready pod $pod
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} logs $pod -c $container
  xtrace off
  checkInteractiveMode
}

function kubectl::execUniqueContainer() {
  pod=$1
  shift
  xtrace on
  kubectl exec $pod -- $*
  xtrace off
  checkInteractiveMode
}

function kubectl::execUniqueContainerWithReturnCarriage() {
  pod=$1
  shift
  xtrace on
  kubectl exec $pod -- $*
  xtrace off
  echo
  checkInteractiveMode
}

function kubectl::execUniqueContainerWithTty() {
  pod=$1
  shift
  xtrace on
  kubectl exec -it $pod -- $@
  xtrace off
  checkInteractiveMode
}

function kubectl::execContainer() {
  pod=$1
  container=$2
  shift
  shift
  xtrace on
  kubectl exec $pod -c $container -- $*
  xtrace off
  checkInteractiveMode
}

##########################
#   REPLICASET METHODS   #
##########################

function kubectl::showReplicaSets() {
  print_info "Show replicasets"
  kubectl::manageArguments $@
  xtrace on
  #kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get rs ${K8S_LABELS:+-l $K8S_LABELS} -o wide
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get rs ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showReplicaSetsInAllNamespaces() {
  print_info "Show replicasets"
  kubectl::manageArguments $@
  xtrace on
  kubectl get rs --all-namespaces ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::getReplicasFromReplicaSet() {
  replicaSet=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get rs $replicaSet -o jsonpath="{.spec.replicas}"
  xtrace off
}

function kubectl::getLastReplicaSetEventsFromDeployment() {
  print_info "Show events from replicaset"
  deployment=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} describe rs $deployment | tail -2
  xtrace off
}

function kubectl::scaleReplicaSet() {
  replicaSet=$1
  replicas=$2
  shift
  print_info "Scale replicas to $replicas"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    scale replicaset $replicaSet --replicas=$replicas
  xtrace off
  checkInteractiveMode
}

##########################
#   DEPLOYMENT METHODS   #
##########################

function kubectl::showDeployments() {
  print_info "Show deployments"
  kubectl::manageArguments $@
  xtrace on
  #kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get deploy ${K8S_LABELS:+-l $K8S_LABELS} -o wide
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get deploy ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showDeploymentsInAllNamespaces() {
  print_info "Show deployments"
  kubectl::manageArguments $@
  xtrace on
  kubectl get deploy --all-namespaces ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::getReplicasFromDeployment() {
  deploy=$1
  kubectl::manageArguments $@
  shift
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get deploy $deploy -o jsonpath="{.spec.replicas}"
  xtrace off
}

function kubectl::scaleDeployment() {
  deploy=$1
  replicas=$2
  shift
  shift
  print_info "Scale replicas to $replicas"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    scale deployment $deploy --replicas=$replicas
  xtrace off
  checkInteractiveMode
}

function kubectl::waitForDeployment() {
  deploy=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    wait --for=condition=available deployment $deploy
  xtrace off
  checkInteractiveMode
}

function kubectl::showRolloutStatusFromDeployment() {
  print_info "Show rollout status from deployment"
  deploy=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    rollout status deployment $deploy
  xtrace off
  checkInteractiveMode
}

function kubectl::showRolloutHistoryFromDeployment() {
  print_info "Show rollout history from deployment"
  deploy=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    rollout history deployment $deploy
    # --revision=$2
  xtrace off
  checkInteractiveMode
}

function kubectl::annotateDeploymentChangeCause() {
  deploy=$1
  shift
  message=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    annotate deployment $deploy \
    kubernetes.io/change-cause="$message"
  xtrace off
  checkInteractiveMode
}

function kubectl::rollbackDeployment() {
  print_info "Rollout undo deployment"
  deploy=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    rollout undo deployment $deploy
    # --to-revision=$2
  xtrace off
  checkInteractiveMode
}

##########################
#     SERVICE METHODS    #
##########################

function kubectl::showServices() {
  print_info "Show services"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get svc ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showServicesInAllNamespaces() {
  print_info "Show services"
  kubectl::manageArguments $@
  xtrace on
  kubectl get svc --all-namespaces ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showEndpointsByService() {
  print_info "Show endpoints filtered by service"
  service=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get endpoints $service ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showEndpointsByLabels() {
  print_info "Show endpoints filtered by service"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get endpoints ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::getPortByService() {
  service=$1
  targetPort=$2
  shift
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get svc $service --no-headers \
    -o custom-columns=":spec.ports[?(@.targetPort == '$targetPort')].port"
  xtrace off
}

function kubectl::getNodePortByService() {
  service=$1
  targetPort=$2
  shift
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get svc $service --no-headers \
    -o custom-columns=":spec.ports[?(@.targetPort == '$targetPort')].nodePort"
  xtrace off
}

##########################
#     INGRESS METHODS    #
##########################

function kubectl::showIngresses() {
  print_info "Show ingresses"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get ingress ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showIngressesDescription() {
  print_info "Show ingress description"
  ingress=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe ingress $ingress ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

##########################
#   PERSISTENT VOLUMES   #
##########################

function kubectl::showPersistentVolumes() {
  xtrace on
  kubectl get pv ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showPersistentVolumeClaims() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get pvc ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

##########################
#   CONFIGMAP METHODS    #
##########################

function kubectl::showConfigMaps() {
  print_info "Show configmaps"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get cm ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showConfigMapDescription() {
  configmap=$1
  shift
  print_info "Show configmap description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe cm $configmap ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::createConfigMap() {
  dstFile=$1
  shift
  configmap=$1
  shift
  pocLabel=$1
  shift
  xtrace on
  kubectl create configmap $configmap $@ \
    --dry-run=client -o yaml | \
    sed -e 's|creationTimestamp: null|labels:|' | \
    sed -e "s/labels:/& \n    $pocLabel/" | \
    tee $dstFile | kubectl apply -f -
  xtrace off
  checkInteractiveMode
}

##########################
#    SECRETS METHODS     #
##########################

function kubectl::createGenericSecret() {
  dstFile=$1
  shift
  secret=$1
  shift
  pocLabel=$1
  shift
  print_info "Create generic secret and edit labels"
  xtrace on
  kubectl create secret generic $secret $@ \
    --dry-run=client -o yaml | \
    sed -e 's|creationTimestamp: null|labels:|' | \
    sed -e "s/labels:/& \n    $pocLabel/" | \
    tee $dstFile | kubectl apply -f -
  xtrace off
  checkInteractiveMode
}

function kubectl::showSecrets() {
  print_info "Show secrets"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get secrets ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showSecretDescription() {
  secret=$1
  shift
  print_info "Show secret description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe secrets $secret ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::decodeSecretByKey() {
  secret=$1
  secretKey=$2
  shift
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get secret $secret \
    -o custom-columns=":data['${secretKey}']" | base64 --decode
    #-o jsonpath="{.data.${secretKey}}" | base64 --decode
  xtrace off
}

function kubectl::deleteSecret() {
  xtrace on
  kubectl delete secret $1
  xtrace off
  checkInteractiveMode
}

##########################
#      RBAC METHODS      #
##########################

function kubectl::showRoles() {
  print_info "Show roles"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get roles ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showRoleDescription() {
  role=$1
  shift
  print_info "Show role description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe role $role ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showRoleBindings() {
  print_info "Show rolebindings"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get rolebindings ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showRoleBindingDescription() {
  role=$1
  shift
  print_info "Show rolebinding description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe rolebinding $role ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showClusterRoles() {
  print_info "Show cluster roles"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get clusterroles ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showClusterRoleDescription() {
  role=$1
  shift
  print_info "Show clusterrole description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe clusterrole $role ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showClusterRoleBindings() {
  print_info "Show rolebindings"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    get clusterrolebindings ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

function kubectl::showClusterRoleBindingDescription() {
  role=$1
  shift
  print_info "Show rolebinding description"
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    describe clusterrolebinding $role ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
  checkInteractiveMode
}

###################################
#    HORIZONTAL POD AUTOSCALER    #
###################################

function kubectl::getHorizontalPodAutoscaler() {
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} get hpa ${K8S_LABELS:+-l $K8S_LABELS}
  xtrace off
}

##########################
#     METRICS SERVER     #
##########################

function kubectl::resetMetricsServer() {
  print_debug "Reset metrics server to clean obsolete pod data"
  PODS=($(kubectl::getRunningPods -n kube-system | grep ^metrics-server))
  for pod in $PODS; do
    kubectl::forceDeletePod $pod -n kube-system
  done
  checkInteractiveMode
}

function kubectl::checkNodeMetrics() {
  isTraceEnabled=${1:-false}
  if [ $isTraceEnabled = true ]; then
      xtrace on
  fi

  kubectl top nodes 2> /dev/null

  result=$?
  xtrace off
  return $result
}

function kubectl::waitForNodeMetrics() {
  print_debug "Waiting for available node metrics..."
  kubectl::checkNodeMetrics true
  local areMetricsAvailable=$?
  local endTime=$(( $(date +%s) + $METRICS_TIMEOUT_SECS )) # Calculate end time.
  while [ $areMetricsAvailable != 0 -a $(date +%s) -lt $endTime ]; do  # Loop until interval has elapsed.
    sleep $METRICS_INTERVAL_SECS
    kubectl::checkNodeMetrics
    areMetricsAvailable=$?
  done

  if [ $areMetricsAvailable -ne 0 ]; then
    print_warn "Timeout. Metrics server unavailable"
  fi

  return $areMetricsAvailable
}

function kubectl::showNodeMetrics() {
  kubectl::waitForNodeMetrics &
  PID=$!
  showProgressBar $PID
  wait $PID
}

function kubectl::checkPodMetrics() {
  isTraceEnabled=$1
  shift
  if [ $isTraceEnabled = true ]; then
      xtrace on
  fi

  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} \
    top pods ${K8S_LABELS:+-l $K8S_LABELS} --containers 2> /dev/null

  result=$?
  xtrace off
  return $result
}

function kubectl::waitForPodMetrics() {
  print_debug "Waiting for available pod metrics..."
  kubectl::manageArguments $@
  kubectl::checkPodMetrics true $@
  local areMetricsAvailable=$?
  local endTime=$(( $(date +%s) + $METRICS_TIMEOUT_SECS )) # Calculate end time.
  while [ $areMetricsAvailable != 0 -a $(date +%s) -lt $endTime ]; do  # Loop until interval has elapsed.
    sleep $METRICS_INTERVAL_SECS
    kubectl::checkPodMetrics false $@
    areMetricsAvailable=$?
  done

  if [ $areMetricsAvailable -ne 0 ]; then
    print_warn "Timeout. Metrics server unavailable"
  fi

  return $areMetricsAvailable
}


function kubectl::showPodMetrics() {
  kubectl::waitForPodMetrics &
  PID=$!
  showProgressBar $PID
  wait $PID
}

function kubectl::waitForPodMetricsUntilPodRestarted() {
  declare -i isRestarted=0
  previousRestartCount=$(kubectl::getRestartCountByPod $1)
  previousRestartCount=${previousRestartCount:-0}
  local endTime=$(( $(date +%s) + $RESTART_TIMEOUT_SECS )) # Calculate end time.
  while [ $isRestarted -eq 0 -a $(date +%s) -lt $endTime ]; do  # Loop until interval has elapsed.
    kubectl::waitForPodMetrics
    sleep $RESTART_INTERVAL_SECS
    currentRestartCount=$(kubectl::getRestartCountByPod $1)
    currentRestartCount=${currentRestartCount:-0}
    if [ $currentRestartCount -gt $previousRestartCount ];then
      isRestarted=1
    fi
  done

  return $isRestarted
}

function kubectl::watchPodMetricsUntilPodRestarted() {
  kubectl::waitForPodMetricsUntilPodRestarted $1 &
  PID=$!
  showProgressBar $PID
  wait $PID
}

function kubectl::waitForPodRestarted() {
  declare -i isRestarted=0
  previousRestartCount=$(kubectl::getRestartCountByPod $1)
  previousRestartCount=${previousRestartCount:-0}
  local endTime=$(( $(date +%s) + $RESTART_TIMEOUT_SECS )) # Calculate end time.
  while [ $isRestarted -eq 0 -a $(date +%s) -lt $endTime ]; do  # Loop until interval has elapsed.
    sleep $RESTART_INTERVAL_SECS
    currentRestartCount=$(kubectl::getRestartCountByPod $1)
    currentRestartCount=${currentRestartCount:-0}
    if [ $currentRestartCount -gt $previousRestartCount ];then
      isRestarted=1
    fi
  done

  return $isRestarted
}

##########################
#         PROBES         #
##########################

function kubectl::showLivenessProbe() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} describe pod $pod \
    ${K8S_LABELS:+-l $K8S_LABELS} | grep Liveness:
  xtrace off
  checkInteractiveMode
}

function kubectl::showReadinessProbe() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} describe pod $pod \
    ${K8S_LABELS:+-l $K8S_LABELS} | grep Readiness:
  xtrace off
  checkInteractiveMode
}

function kubectl::showStartupProbe() {
  pod=$1
  shift
  kubectl::manageArguments $@
  xtrace on
  kubectl ${K8S_NAMESPACE:+--namespace $K8S_NAMESPACE} describe pod $pod \
    ${K8S_LABELS:+-l $K8S_LABELS} | grep Startup:
  xtrace off
  checkInteractiveMode
}
