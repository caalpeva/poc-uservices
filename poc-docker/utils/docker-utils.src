#!/bin/echo "source me !"
# Requires: /../../dependencies/downloads/poc-bash-master/includes/print-utils.src
# 	    /../../dependencies/downloads/poc-bash-master/includes/trace-utils.src
#       /../../dependencies/downloads/poc-bash-master/includes/progress-bar-utils.src
#           /../../utils/microservices-utils.src

##########################
#  BASIC DOCKER METHODS  #
##########################

function docker_utils::showSearchUsage() {
  print_info "Show docker search usage"
  xtrace on
  docker search --help
  xtrace off
  checkInteractiveMode
}

function docker_utils::searchImages() {
  print_info "Search docker image: $1"
  xtrace on
  docker search $1 --limit 5
  xtrace off
  checkInteractiveMode
}

function docker_utils::searchOfficialImage() {
  print_info "Search docker official image: $1"
  xtrace on
  docker search --filter is-official=true $1
  xtrace off
}

function docker_utils::showPullUsage() {
  print_info "Show docker pull usage"
  xtrace on
  docker pull --help
  xtrace off
  checkInteractiveMode
}

function docker_utils::getNetworkList() {
  print_info "Show docker networks"
  xtrace on
  docker network ls
  xtrace off
  checkInteractiveMode
}


function docker_utils::pullImage() {
  local option=${2:-}
  print_info "Download docker image: $1"
  xtrace on
  docker pull $1 $option
  xtrace off
  checkInteractiveMode
}

function docker_utils::showHistoryUsage() {
  print_info "Show docker history usage"
  xtrace on
  docker history --help
  xtrace off
  checkInteractiveMode
}

function docker_utils::getImageHistory() {
  local option=${2:-}
  print_info "Show docker image history: $1"
  xtrace on
  docker history $1 $option
  xtrace off
  checkInteractiveMode
}

function docker_utils::showImagesUsage() {
  print_info "Show docker images usage"
  xtrace on
  docker images --help
  xtrace off
  checkInteractiveMode
}

function docker_utils::getImages() {
  local option=${1:-}
  print_info "Show docker images"
  xtrace on
  docker images $option
  xtrace off
  checkInteractiveMode
}

function docker_utils::getImagesByPrefix() {
  xtrace on
  docker images | grep $1
  xtrace off
}

function docker_utils::showImagesByPrefix {
  status=$(docker_utils::getImagesByPrefix $1)
  docker images | head -1
  echo "$status"
  checkInteractiveMode
}

function docker_utils::createImageFromDockerfile() {
  print_info "Create image from Dockerfile"
  xtrace on
  docker build -t $1 $2
  xtrace off
  checkInteractiveMode
}

function docker_utils::createBuilderImageFromDockerfile() {
  print_info "Create builder image from Dockerfile"
  xtrace on
  docker build --target builder -t  $1 $2
  xtrace off
  checkInteractiveMode
}

function docker_utils::removeImages() {
  print_info "Remove images: $*"
  xtrace on
  docker rmi $@
  xtrace off
  checkInteractiveMode
}

function docker_utils::removeAllImages() {
  print_info "Removing all images..."
  xtrace on
  docker rmi $(docker images -aq)
  xtrace off
  checkInteractiveMode
}

function docker_utils::copyFiles() {
  xtrace on
  docker cp $1 $2
  xtrace off
  checkInteractiveMode
}

##############################
#  AUXILIARY DOCKER METHODS  #
##############################

function docker_utils::getContainerStatus() {
  xtrace on
  docker ps -a
  xtrace off
}

function docker_utils::getContainerStatusByPrefix() {
  xtrace on
  docker ps -a | grep $1
  xtrace off
}

function docker_utils::showContainersByPrefix {
  status=$(docker_utils::getContainerStatusByPrefix $1)
  docker ps -a | head -1
  echo "$status"
  checkInteractiveMode
}

function docker_utils::getContainerLongIdByName() {
  docker inspect --format="{{.Id}}" $1
}

function docker_utils::getRunningContainerIdsByPrefix {
  xtrace on
  docker ps -qf "name=^$1*"
  xtrace off
}

function docker_utils::getExitedContainerIdsByPrefix {
  xtrace on
  docker ps -q \
    --filter "status=exited" \
    --filter "name=^$1*"
  xtrace off
}

function docker_utils::getAllContainerIdsByPrefix {
  #docker ps --format 'CONTAINER ID : {{.ID}} | Name: {{.Names}} | Image:  {{.Image}} |  Ports: {{.Ports}}'
  xtrace on
  docker ps -aqf "name=^$1*"
  xtrace off
}

function docker_utils::showLogs() {
  xtrace on
  docker logs $1
  xtrace off

  checkInteractiveMode
}

function docker_utils::removeContainersOneByOne() {
  echo "Containers: $*"
  if [ $# -gt 0 ]
  then
    for containerId in $@
    do
      xtrace on
      docker rm -f $containerId
      xtrace off
    done
  fi
}

function docker_utils::removeContainers() {
  echo "Containers: $*"
  if [ $# -gt 0 ]
  then
      xtrace on
      docker rm -f $*
      xtrace off
  fi
}

function docker_utils::removeAllContainers {
  docker rm -f $(docker ps -aq)
}

function docker_utils::getIpAddressFromContainer {
  local container=$1
  local network=$2
  if [ -z $network ]; then
    xtrace on
    docker inspect -f "{{ .NetworkSettings.IPAddress }}" $container
    xtrace off
  else
    xtrace on
    docker inspect -f "{{ .NetworkSettings.Networks.$network.IPAddress }}" $container
    xtrace off
  fi
}

function docker_utils::getFirstHostPortFromContainerData {
  xtrace on
  docker inspect --format "{{ (index (index .NetworkSettings.Ports \"$2/tcp\") 0).HostPort }}" $1
  xtrace off
}

function docker_utils::getContainerMounts() {
  print_info "Checking mounts from container $1..."
  xtrace on
  docker inspect -f '{{ json .Mounts }}' $1
  xtrace off
  checkInteractiveMode
}

function docker_utils::attachContainer() {
  xtrace on
  docker attach $1
  xtrace off
}

function docker_utils::createVolumen() {
  xtrace on
  docker volume create $1
  xtrace off
}

function docker_utils::removeVolumes() {
  xtrace on
  docker volume rm $*
  xtrace off
}

function docker_utils::createNetwork() {
  local options=$1
  local name=$2
  xtrace on
  docker network create $options $name
  xtrace off
}

function docker_utils::removeNetwork() {
  xtrace on
  docker network rm $*
  xtrace off
}

function docker_utils::execContainer() {
  xtrace on
  docker exec $1 $2
  xtrace off
  checkInteractiveMode
}

function docker_utils::execContainerWithTty() {
  xtrace on
  docker exec -it $1 $2
  xtrace off
  checkInteractiveMode
}

function docker_utils::execContainerPing() {
  from=$1
  to=$2
  command="docker exec $from ping $to -c 3"
  echo "+ $command"
  eval "$command"
  return $?
}

function docker_utils::execContainerPingAsRoot() {
  from=$1
  to=$2
  command="docker exec -u root $from ping $to -c 3"
  echo "+ $command"
  eval "$command"
  return $?
}

function docker_utils::checkUrl  {
  command="curl $1"
  echo "+ $command"
  eval "$command"
  return $?
}

function docker_utils::checkHttpServerAvailability  {
  declare -i result=0
  print_info "Check that the Http server from $1 is available..."
  print_debug "Extract host port from container data..."
  port=$(docker_utils::getFirstHostPortFromContainerData $1 $2)

  docker_utils::checkUrl "http://localhost:${port}"
  if [ $? -ne 0 ]
  then
    print_error "Http server from $1 is not available"
    result=1
  fi

  checkInteractiveMode
  return $result
}

function docker_utils::networkInspect() {
  xtrace on
  docker network inspect $1 | grep -iE 'subnet|gateway'
  xtrace off
  checkInteractiveMode
}

function docker_utils::connectToNetwork() {
  local network=$1
  local container=$2
  xtrace on
  docker network connect $network $container
  xtrace off
}

function docker_utils::disconnectToNetwork() {
  local network=$1
  local container=$2
  xtrace on
  docker network disconnect $network $container
  xtrace off
}

function docker_utils::showNetworkInterfaces() {
  container=$1
  xtrace on
  docker exec $container hostname
  docker exec $container ip addr
  docker exec $container ip route
  xtrace off
  checkInteractiveMode
}

function docker_utils::composeUp() {
  xtrace on
  docker-compose up -d $@
  xtrace off
}

function docker_utils::composeDown() {
  xtrace on
  docker-compose down $@
  xtrace off
}
