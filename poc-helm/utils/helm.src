#!/bin/echo "source me !"
# Requires: /../../dependencies/downloads/poc-bash-master/includes/print-utils.src
# 	    /../../dependencies/downloads/poc-bash-master/includes/trace-utils.src
#       /../../dependencies/downloads/poc-bash-master/includes/progress-bar-utils.src
#           /../../utils/microservices-utils.src

##########################
#  HLEM GLOBAL VARIABLES  #
##########################
HELM_NAMESPACE=""
HELM_LABELS=""

##########################
#   BASIC HELM METHODS   #
##########################

function helm::showSearchUsage() {
  print_info "Show helm search usage"
  xtrace on
  helm search --help
  xtrace off
  checkInteractiveMode
}

function helm::searchChartsFromHub() {
  print_info "Search helm charts from hub: $1"
  xtrace on
  helm search hub $1 --burst-limit 5
  xtrace off
  checkInteractiveMode
}

function helm::searchChartsFromRepos() {
  print_info "Search helm charts from repositories: $1"
  xtrace on
  helm search repo $1 --burst-limit 5
  xtrace off
  checkInteractiveMode
}

function helm::createChart() {
  print_info "Create chart"
  xtrace on
  helm create $@
  xtrace off
  checkInteractiveMode
}

function helm::installChart() {
  print_info "Install chart"
  xtrace on
  helm install $@ --wait
  xtrace off
  checkInteractiveMode
}

function helm::uninstallChart() {
  print_info "Uninstall chart"
  xtrace on
  helm uninstall $@
  xtrace off
}

function helm::getChartReleases() {
  print_info "Show chart instances"
  xtrace on
  helm ls
  xtrace off
  checkInteractiveMode
}

function helm::getChartReleasesByPrefix() {
  filter=$1
  shift
  helm::manageArguments $@
  xtrace on
  helm ls ${HELM_NAMESPACE:+--namespace $HELM_NAMESPACE}| grep ^$filter
  xtrace off
}

function helm::showChartReleasesByPrefix {
  status=$(helm::getChartReleasesByPrefix $@)
  helm ls | head -1
  echo "$status"
  checkInteractiveMode
}

##############################
#  AUXILIARY HELM METHODS  #
##############################

function helm::showLogs() {
  xtrace on
  docker logs $1
  xtrace off
}

function helm::resetGlobalVariables() {
  NAMESPACE=""
  LABELS=""
}

function helm::manageArguments() {
  helm::resetGlobalVariables
  OPTIND=1
  while getopts "n:l:" option; do
    case ${option} in
      n) HELM_NAMESPACE=$OPTARG
         ;;
      l) HELM_LABELS=$OPTARG
         ;;
      ?) echo "Invalid option: $OPTARG" 1>&2
         ;;
      :) echo "Invalid option: $OPTARG requires an argument" 1>&2
    esac
  done
  shift $((OPTIND-1))
}
